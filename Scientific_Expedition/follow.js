"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = require("assert");
/*
Вы получили письмо от друга, которого вы не видели и не слышали какое-то время. В этом письме он дает вам указания о том, как найти скрытое сокровище.

В этой миссии Вы должны следовать данному списку инструкций, которые приведут вас к определенной точке на карте. Список инструкций - это строка, каждая буква этой строки указывает Вам направление следующего шага.

Буква «f» - указывает на то, что Вам нужно двигаться вперед, «b» - назад, «l» - влево, а «r» - вправо.

То есть, если список Ваших инструкций - «fflff», то Вы должны сделать два шага вперед, потом один шаг влево, а затем снова переместиться на два шага вперед.

Теперь давайте представим, что Вы находитесь в позиции (0,0). Продвинувшись вперед, Вы измените свою позицию на (0, 1). Сделав еще один шаг, она будет (0, 2). Ступив влево, Ваша позиция станет (-1, 2). И после последующих двух шагов вперед Ваши координаты будут (-1, 4).

Ваша цель заключается в том, чтобы найти конечные координаты. Точно так же, как в приведенном выше примере они были (-1, 4).

Входные данные: Строка.

Выходные данные: Массив из двух ints

Пример:
follow('fflff') == [-1, 4]
follow('ffrff') == [1, 4]
follow('fblr') == [0, 0]

Как это используется: В играх, где есть карта.

Предварительное условие: Допускаются только символы f,b,l и r
 */
function follow(instructions) {
    // your code here
    var X = 0;
    var Y = 0;
    for (var _i = 0, instructions_1 = instructions; _i < instructions_1.length; _i++) {
        var char = instructions_1[_i];
        switch (char) {
            case 'f':
                Y += 1;
                break;
            case 'b':
                Y -= 1;
                break;
            case 'l':
                X -= 1;
                break;
            case 'r':
                X += 1;
                break;
        }
    }
    return [X, Y];
}
console.log('Example:');
console.log(follow('fflff'));
// These "asserts" are used for self-checking
assert_1.strict.deepEqual(follow('fflff'), [-1, 4]);
assert_1.strict.deepEqual(follow('ffrff'), [1, 4]);
assert_1.strict.deepEqual(follow('fblr'), [0, 0]);
