import {strict as assert} from "assert";
/*
 Этой миссией я хочу начать серию миссий с лампочками. Эти миссии помогут вам разобраться с понятием процессов и оценкой эффективности процессов. Вместо лампочек в реальной жизни может быть оборудование, эффективность которого надо посчитать, или рабочие, которые выходят на работу и их зарплату нужно высчитать.

Первая миссия очень простая. Есть лампочка, которая по умолчанию выключена, и кнопка, по нажатию на которую лампочка переключает свое состояние. Т.е. если лампочка выключена и происходит нажатие на кнопку, то лампочка включается, а если нажать еще раз, то выключится.

(Все просто. Уверен, что если ты дошел до этой миссии, то должен понять. На всякий случай еще добавлена картинка.)

example

На вход функции дан массив datetime объектов — это дата и время нажатия на кнопку. Вашей задачей является определить, как долго горела лампочка. Массив при этом всегда отсортирован по возрастанию, в нем нет повторяющихся элементов и количество элементов всегда четное число (это значит, что лампочка, в конце концов, будет выключена).

Input: An array of Date objects

Output: Колличество секунд как integer.

Example:
sumLight([
    new Date(2015, 1, 12, 10, 0 , 0),
    new Date(2015, 1, 12, 10, 10 , 10),
]) == 610

sumLight([
    new Date(2015, 1, 12, 10, 0 , 0),
    new Date(2015, 1, 12, 10, 10 , 10),
    new Date(2015, 1, 12, 11, 0 , 0),
    new Date(2015, 1, 12, 11, 10 , 10),
]) == 1220

sumLight([
    new Date(2015, 1, 12, 10, 0 , 0),
    new Date(2015, 1, 12, 10, 0 , 1),
]) == 1

 */

function sumLight(els: Date[]): number {

  let count:number =0;
  let temp ;
  while(els.length >0){
    temp = els.splice(0,2);
    // console.log(temp)
    // console.log()
    count+= temp[1].getTime() - temp[0].getTime()

  }
  return (count/1000);

}

console.log('Example:');
console.log(sumLight([
  new Date(2015, 1, 12, 10, 0 , 0),
  new Date(2015, 1, 12, 10, 10 , 10),
  new Date(2015, 1, 12, 11, 0 , 0),
  new Date(2015, 1, 12, 11, 10 , 10),
]));

// console.log(sumLight([
//   new Date(2015, 1, 12, 10, 0 , 0),
//   new Date(2015, 1, 12, 10, 10 , 10),
// ]));

//console.log(sumLight([1,2,3,4]))

assert.equal(sumLight([
  new Date(2015, 1, 12, 10, 0 , 0),
  new Date(2015, 1, 12, 10, 10 , 10),
  new Date(2015, 1, 12, 11, 0 , 0),
  new Date(2015, 1, 12, 11, 10 , 10),
]), 1220)

assert.equal(sumLight([
  new Date(2015, 1, 12, 10, 0 , 0),
  new Date(2015, 1, 12, 10, 10 , 10),
]), 610)

assert.equal(sumLight([
  new Date(2015, 1, 12, 10, 0 , 0),
  new Date(2015, 1, 12, 10, 10 , 10),
  new Date(2015, 1, 12, 11, 0 , 0),
  new Date(2015, 1, 12, 11, 10 , 10),
  new Date(2015, 1, 12, 11, 10 , 10),
  new Date(2015, 1, 12, 12, 10 , 10),
]), 4820)

assert.equal(sumLight([
  new Date(2015, 1, 12, 10, 0 , 0),
  new Date(2015, 1, 12, 10, 0 , 1),
]), 1)